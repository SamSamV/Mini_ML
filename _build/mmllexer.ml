# 1 "mmllexer.mll"
 

  open Lexing
  open Mmlparser

  exception Lexing_error of string

  let keyword_or_ident =
    let h = Hashtbl.create 17 in
    List.iter (fun (s, k) -> Hashtbl.add h s k)
      [ "fun" , FUN ;
        "let" , LET ;
        "in" , IN ;
        "if" , IF ;
        "then" , THEN ;
        "else" , ELSE ;
        "rec" , REC ;
        "int" , INT_TYPE ;
        "bool", BOOL_TYPE ;
        "unit", UNIT_TYPE ;
        "true", TRUE ;
        "false", FALSE ;
        "not", NOT ;
        "mod", MOD ;
      ] ;
    fun s ->
      try  Hashtbl.find h s
      with Not_found -> IDENT(s) 
        

# 33 "mmllexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\228\255\229\255\230\255\231\255\232\255\233\255\234\255\
    \002\000\001\000\018\000\001\000\242\255\003\000\245\255\248\255\
    \249\255\079\000\017\000\032\000\034\000\002\000\255\255\250\255\
    \253\255\236\255\244\255\241\255\235\255\240\255\238\255\237\255\
    \050\000\252\255\253\255\002\000\036\000\255\255\254\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \026\000\026\000\016\000\026\000\255\255\012\000\255\255\255\255\
    \255\255\004\000\003\000\008\000\009\000\001\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\002\000\002\000\255\255\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \255\255\255\255\255\255\255\255\000\000\255\255\000\000\000\000\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \034\000\000\000\000\000\255\255\255\255\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\021\000\022\000\021\000\000\000\021\000\000\000\021\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\009\000\021\000\000\000\000\000\000\000\011\000\027\000\
    \020\000\014\000\015\000\016\000\038\000\019\000\006\000\012\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\007\000\003\000\010\000\013\000\030\000\028\000\
    \026\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\023\000\024\000\037\000\000\000\029\000\
    \018\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\035\000\000\000\036\000\000\000\025\000\017\000\
    \000\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\005\000\008\000\004\000\031\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\000\000\000\000\000\000\000\000\017\000\000\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\021\000\255\255\000\000\255\255\021\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\021\000\255\255\255\255\255\255\000\000\011\000\
    \000\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\009\000\010\000\
    \013\000\018\000\018\000\018\000\018\000\018\000\018\000\018\000\
    \018\000\018\000\018\000\020\000\020\000\036\000\255\255\010\000\
    \019\000\019\000\019\000\019\000\019\000\019\000\019\000\019\000\
    \019\000\019\000\032\000\255\255\032\000\255\255\019\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\008\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\255\255\255\255\255\255\255\255\017\000\255\255\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\017\000\017\000\017\000\017\000\017\000\017\000\
    \017\000\017\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\032\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 40 "mmllexer.mll"
      ( new_line lexbuf; token lexbuf )
# 162 "mmllexer.ml"

  | 1 ->
# 42 "mmllexer.mll"
      ( token lexbuf )
# 167 "mmllexer.ml"

  | 2 ->
# 44 "mmllexer.mll"
      ( comment lexbuf; token lexbuf )
# 172 "mmllexer.ml"

  | 3 ->
let
# 45 "mmllexer.mll"
              n
# 178 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 46 "mmllexer.mll"
      ( CST( int_of_string n) )
# 182 "mmllexer.ml"

  | 4 ->
let
# 47 "mmllexer.mll"
             i
# 188 "mmllexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 48 "mmllexer.mll"
      ( keyword_or_ident i )
# 192 "mmllexer.ml"

  | 5 ->
# 50 "mmllexer.mll"
      ( UNIT )
# 197 "mmllexer.ml"

  | 6 ->
# 52 "mmllexer.mll"
      ( PLUS )
# 202 "mmllexer.ml"

  | 7 ->
# 54 "mmllexer.mll"
      ( STAR )
# 207 "mmllexer.ml"

  | 8 ->
# 56 "mmllexer.mll"
      ( MINUS )
# 212 "mmllexer.ml"

  | 9 ->
# 58 "mmllexer.mll"
      ( LPAR )
# 217 "mmllexer.ml"

  | 10 ->
# 60 "mmllexer.mll"
      ( RPAR )
# 222 "mmllexer.ml"

  | 11 ->
# 62 "mmllexer.mll"
      (EQUALS)
# 227 "mmllexer.ml"

  | 12 ->
# 64 "mmllexer.mll"
      (EQONLY)
# 232 "mmllexer.ml"

  | 13 ->
# 66 "mmllexer.mll"
      (DIV)
# 237 "mmllexer.ml"

  | 14 ->
# 68 "mmllexer.mll"
        (AND)
# 242 "mmllexer.ml"

  | 15 ->
# 70 "mmllexer.mll"
        (LE)
# 247 "mmllexer.ml"

  | 16 ->
# 72 "mmllexer.mll"
        (LT)
# 252 "mmllexer.ml"

  | 17 ->
# 74 "mmllexer.mll"
        (NEQ)
# 257 "mmllexer.ml"

  | 18 ->
# 76 "mmllexer.mll"
        (OR)
# 262 "mmllexer.ml"

  | 19 ->
# 78 "mmllexer.mll"
        (RARROW)
# 267 "mmllexer.ml"

  | 20 ->
# 80 "mmllexer.mll"
        (LARROW)
# 272 "mmllexer.ml"

  | 21 ->
# 82 "mmllexer.mll"
        (TWODOT)
# 277 "mmllexer.ml"

  | 22 ->
# 84 "mmllexer.mll"
        (DOT)
# 282 "mmllexer.ml"

  | 23 ->
# 86 "mmllexer.mll"
        (LACC)
# 287 "mmllexer.ml"

  | 24 ->
# 88 "mmllexer.mll"
        (RACC)
# 292 "mmllexer.ml"

  | 25 ->
# 90 "mmllexer.mll"
        (DOTVIRG)
# 297 "mmllexer.ml"

  | 26 ->
# 92 "mmllexer.mll"
      ( raise (Lexing_error ("unknown character : " ^ (lexeme lexbuf))) )
# 302 "mmllexer.ml"

  | 27 ->
# 94 "mmllexer.mll"
      ( EOF )
# 307 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 32
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 98 "mmllexer.mll"
      ( () )
# 319 "mmllexer.ml"

  | 1 ->
# 100 "mmllexer.mll"
      ( comment lexbuf; comment lexbuf )
# 324 "mmllexer.ml"

  | 2 ->
# 102 "mmllexer.mll"
      ( comment lexbuf )
# 329 "mmllexer.ml"

  | 3 ->
# 104 "mmllexer.mll"
      ( raise (Lexing_error "unterminated comment") )
# 334 "mmllexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

